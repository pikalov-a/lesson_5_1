##Перегрузка операторов#module_5_3
##Задача "Нужно больше этажей":
#if isinstance(self, House) and isinstance(other, House):
#    if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
#        return self.total *= value
#    else:
#        print('Количество этажей не является числовым')
#else:
#    print('Переданный параметр не принадлежит классу House')


class House:
    def __init__( self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors
    def __str__(self):
        return (f'Название: {self.name}, кол-во этажей: {self.number_of_floors}')
    def __eq__(self, other):
        if isinstance(self, House) and isinstance(other, House):
            if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
                return self.number_of_floors == other.number_of_floors
            else:
                print ('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
#            return self.number_of_floors == other.number_of_floors
    def __lt__(self, other):    #( <)
        if isinstance(self, House) and isinstance(other, House):
            if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
                return self.number_of_floors < other.number_of_floors
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __le__(self, other):    #(<=)
        if isinstance(self, House) and isinstance(other, House):
            if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
                return self.number_of_floors <= other.number_of_floors
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __gt__(self, other):    #( >)
        if isinstance(self, House) and isinstance(other, House):
            if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
                return self.number_of_floors > other.number_of_floors
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __ge__(self, other):    #(>=)
        if isinstance(self, House) and isinstance(other, House):
            if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
                return self.number_of_floors >= other.number_of_floors
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __ne__(self, other):    #( !=)
        if isinstance(self, House) and isinstance(other, House):
            if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
                return self.number_of_floors != other.number_of_floors
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __add__(self, value):
        if isinstance(self, House) :
            if isinstance(self.number_of_floors, int) and isinstance(value, int):
                self.number_of_floors= self.number_of_floors + value
                return self
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __iadd__(self, value):
        if isinstance(self, House) :
            if isinstance(self.number_of_floors, int) and isinstance(value, int):
                self.number_of_floors= self.number_of_floors + value
                return self
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __radd__(self, value):
        if isinstance(self, House) :
            if isinstance(self.number_of_floors, int) and isinstance(value, int):
                self.number_of_floors = self.number_of_floors + value
                return self
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __sub__(self, value):
        if isinstance(self, House) :
            if isinstance(self.number_of_floors, int) and isinstance(value, int):
                self.number_of_floors = self.number_of_floors - value
                return self
            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __isub__(self, value):
        if isinstance(self, House) :
            if isinstance(self.number_of_floors, int) and isinstance(value, int):
                self.number_of_floors = self.number_of_floors - value
                return self

            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
    def __rsub__(self, value):
        if isinstance(self, House) :
            if isinstance(self.number_of_floors, int) and isinstance(value, int):
                self.number_of_floors = self.number_of_floors - value
                return self

            else:
                print('Количество этажей не является числовым')
        else:
            print('Переданный параметр не принадлежит классу House')
#     def __mul__(self, value):
#         if isinstance(self, House) :
#             if isinstance(self.number_of_floors, int) and isinstance(value, int):
#                 return ArithmeticOps(self._total * value)
#             else:
#                 print('Количество этажей не является числовым')
#         else:
#             print('Переданный параметр не принадлежит классу House')
#    def __imul__(self, value):
#        if isinstance(self, House) and isinstance(other, House):
#            if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
#                return self._total *= value
#            else:
#                print('Количество этажей не является числовым')
#        else:
#            print('Переданный параметр не принадлежит классу House')
#    def __rmul__(self, value):
#        if isinstance(self, House) and isinstance(other, House):
#            if isinstance(self.number_of_floors, int) and isinstance(other.number_of_floors, int):
#                return ArithmeticOps(value * self._total)
#            else:
#                print('Количество этажей не является числовым')
#        else:
#            print('Переданный параметр не принадлежит классу House')

h1 = House('ЖК Эльбрус', 10)
h2 = House('ЖК Акация', 20)
print(h1)
print(h2)
print(h1 == h2) # __eq__
h1 = h1 + 10 # __add__
print(h1)
print(h1 == h2)
h1 += 10 # __iadd__
print(h1)
h2 = 10 + h2 # __radd__
print(h2)
print(h1 > h2) # __gt__
print(h1 >= h2) # __ge__
print(h1 < h2) # __lt__
print(h1 <= h2) # __le__
print(h1 != h2) # __ne__
